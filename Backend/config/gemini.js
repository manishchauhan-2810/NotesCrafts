// Backend/config/gemini.js
import { GoogleGenerativeAI } from "@google/generative-ai";

const apiKey = "AIzaSyCwv33KLrsgD3XYeW84vWnWxUML5a4tGQk";
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

/**
 * Generate MCQ quiz from text using Gemini AI
 * @param {string} extractedText - Combined text from PDFs
 * @returns {Promise<Array>} - Array of 20 MCQ questions
 */
export const generateQuizFromText = async (extractedText) => {
  try {
    console.log("ü§ñ Preparing Gemini prompt...");
    
    // Limit text to prevent token overflow
    const limitedText = extractedText.slice(0, 10000);
    
    const prompt = `
You are an expert quiz generator. Generate exactly 20 multiple-choice questions from the following educational content.

CONTENT:
${limitedText}

REQUIREMENTS:
1. Generate EXACTLY 20 questions
2. Each question MUST have exactly 4 options (A, B, C, D)
3. One option must be the correct answer
4. Questions should be clear and unambiguous
5. Cover different topics from the content
6. Mix difficulty levels (easy, medium, hard)
7. Ensure options are distinct and plausible

RESPONSE FORMAT (Valid JSON only):
{
  "questions": [
    {
      "question": "What is photosynthesis?",
      "options": [
        "Process of making food using sunlight",
        "Process of respiration in plants",
        "Process of water absorption",
        "Process of nutrient transport"
      ],
      "correctAnswer": "Process of making food using sunlight"
    }
  ]
}

IMPORTANT: 
- Return ONLY valid JSON
- No markdown, no code blocks, no extra text
- Exactly 20 questions
- correctAnswer must EXACTLY match one of the options
`;

    console.log("üì§ Sending request to Gemini...");

    const chatSession = model.startChat({
      generationConfig,
      history: [],
    });

    const result = await chatSession.sendMessage(prompt);
    const response = result.response.text();
    
    console.log("üì• Received response from Gemini");
    console.log("Response preview:", response.slice(0, 200) + "...");

    // Clean response (remove markdown if present)
    let cleanedResponse = response.trim();
    if (cleanedResponse.startsWith("```json")) {
      cleanedResponse = cleanedResponse.replace(/```json\n?/g, "").replace(/```\n?/g, "");
    }
    if (cleanedResponse.startsWith("```")) {
      cleanedResponse = cleanedResponse.replace(/```\n?/g, "");
    }

    // Parse JSON
    let parsedResponse;
    try {
      parsedResponse = JSON.parse(cleanedResponse);
    } catch (parseError) {
      console.error("‚ùå JSON Parse Error:", parseError.message);
      console.error("Response was:", cleanedResponse);
      throw new Error("Invalid JSON response from AI");
    }

    if (!parsedResponse.questions || !Array.isArray(parsedResponse.questions)) {
      throw new Error("Invalid response format from AI");
    }

    if (parsedResponse.questions.length === 0) {
      throw new Error("No questions generated by AI");
    }

    // Validate each question
    const validQuestions = parsedResponse.questions.filter(q => {
      return q.question && 
             Array.isArray(q.options) && 
             q.options.length === 4 &&
             q.correctAnswer &&
             q.options.includes(q.correctAnswer);
    });

    if (validQuestions.length === 0) {
      throw new Error("No valid questions generated");
    }

    console.log(`‚úÖ Generated ${validQuestions.length} valid questions`);

    return validQuestions;
  } catch (error) {
    console.error("‚ùå Gemini API Error:", error.message);
    throw error;
  }
};

export default { generateQuizFromText };